### 解题思路

1. 首先一个满二叉树只能有2*i+1个节点
2. 满二叉树的左右子树应该也是满二叉树
3. 用一个map存储长度为i的满二叉树
4. 将长度为n的二叉树按照左右节点的个数情况进行拆分

### 代码

* golang

```golang
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func allPossibleFBT(n int) []*TreeNode {
    resultList := make([]*TreeNode,0)

    if n % 2 == 0 {
        return resultList
    }

    numAndNodeMap := make(map[int][]*TreeNode,n)
    
    for i := 1;i <= n;i = i + 2 {
        if i == 1 {
            nowNode := &TreeNode{
                Val: 0,
            }
            numAndNodeMap[i] = append(numAndNodeMap[i],nowNode)
            continue
        } 

        // 左边有j个，右边有i-1-j个
        for j := 1;j < i;j = j + 2 {
            for _,m := range numAndNodeMap[j] {
                for _,n := range numAndNodeMap[i-1-j] {
                    nowNode := &TreeNode{
                        Val: 0,
                    }
                    nowNode.Left = copyNode(m)
                    nowNode.Right = copyNode(n)
                    numAndNodeMap[i] = append(numAndNodeMap[i],nowNode)
                }
            }

        }
    }

    return numAndNodeMap[n]
}

func copyNode(node *TreeNode) *TreeNode {
    return &TreeNode{
        Val: node.Val,
        Left:node.Left,
        Right:node.Right,
    }
}



```

